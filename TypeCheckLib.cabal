-- Copyright (c) 2010, Martin Zuber
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
--   * Redistributions of source code must retain the above copyright
--     notice, this list of conditions and the following disclaimer.
--   * Redistributions in binary form must reproduce the above
--     copyright notice, this list of conditions and the following
--     disclaimer in the documentation and/or other materials provided
--     with the distribution.
--   * Neither the name of the TU Berlin nor the names of its
--     contributors may be used to endorse or promote products derived
--     from this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-- HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

name: 	   	   TypeCheckLib
version:	     0.3
cabal-version: >= 1.8
license:	     BSD3
license-file:	 LICENSE
copyright:	   Copyright (c) 2010, Martin Zuber
author:		     Martin Zuber, Fabian Linges
homepage:      https://github.com/mzuber/deriving-type-checkers
category:	     Compiler
tested-with:	 GHC == 7.4.1
stability:	   experimental
build-type:	   Simple
synopsis:	     A library for deriving type checkers from a type
               system's formal specification.
description:	 The type checker library provides functionality
               to derive type checkers from type systems
               formalized by constraint-based, algorithmic
               deduction rules.

extra-source-files: Examples/Parser/*.hs, Examples/Printer/*.hs,
                    Examples/TypeSystems/*.hs, Examples/FJChecker.hs,
                    Examples/MiniMLChecker.hs, Examples/GuiTool/*.hs,
                    TypeCheckLib/Type.hs-boot, GuiTool/gui.glade

source-repository head
    type: git
    location: https://github.com/mzuber/deriving-type-checkers.git

library
  exposed-modules:  TypeCheckLib.AbstractSyntax,
                    TypeCheckLib.AbstractSyntax.Term,
                    TypeCheckLib.AbstractSyntax.Def,
                    TypeCheckLib.AbstractSyntax.C,
                    TypeCheckLib.Combinators,
                    TypeCheckLib.ConstraintGeneration,
                    TypeCheckLib.ConstraintSolving,
                    TypeCheckLib.Context,
                    TypeCheckLib.Evaluable,
                    TypeCheckLib.Instantiation,
                    TypeCheckLib.Rule,
                    TypeCheckLib.Substitution,
                    TypeCheckLib.Syntax,
                    TypeCheckLib.THUtil,
                    TypeCheckLib.Type,
                    TypeCheckLib.TypeChecker,
                    TypeCheckLib.Unification,
                    TypeCheckLib.Vars,
                    GuiTool.Gui,
                    GuiTool.RuleTree
  build-depends:    pretty >= 1.0.1.1,
                    base,
                    containers,
                    template-haskell >= 2.7.0.0,
                    regex-compat,
                    mtl,
                    gtk >= 0.12.3.1,
                    pango >= 0.12.3,
                    glade >= 0.12.1,
                    MissingH >= 1.1.1.0
  extensions:       DeriveDataTypeable,
                    ExistentialQuantification,
                    FlexibleContexts,
                    TemplateHaskell,
                    FlexibleInstances,
                    ScopedTypeVariables,
                    GADTs,
                    NoMonomorphismRestriction,
                    DoAndIfThenElse